#!/usr/bin/env node
/*
 wildcards dedup (c) 2013 Daniel Wirtz <dcode@dcode.io>

 Licensed under Creative Commons Attribution-NonCommercial-ShareAlike 2.0

 THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE
 COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE"). THE WORK IS PROTECTED BY
 COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS
 AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.

 BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO
 BE BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS YOU THE RIGHTS
 CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND
 CONDITIONS.

 http://creativecommons.org/licenses/by-nc-sa/2.0/
 */

var fs = require("fs");

process.stdin.resume();

function readline(question) {
    process.stderr.write(question+" ");
    var res = fs.readSync(process.stdin.fd, 100, 0, "utf8");
    return res[0].replace(/^\s+|\s+$/g, "");
}

/**
 * Parses a language file (.txt).
 * @param {string} filename
 * @return {Array.<string>}
 */
function parse(filename) {
    var data = fs.readFileSync(filename);
    data = (""+data).
        replace(/\r/g, ""). // NL
        replace(/[_]+[ ]?/g, "_ "). // Normalize wildcards
        replace(/^\s+|\s+$/g, ""); // Trim
    if (data.length == 0) {
        return [];
    }
    return data.split(/\n/g);
}

if (process.argv.length < 3) {
    process.stderr.write("wildcardsgame dedup (c) 2013 Daniel Wirtz <dcode@dcode.io>\nRemoves duplicate cards above the specified similarity threshold (%).\n");
    process.stderr.write("\n   Usage: dedup dupFile.txt [threshold=80] > dedupFile.txt\n");
    process.exit(1);
}

var filename = process.argv[2];
var threshold = process.argv.length >= 4 ? parseInt(process.argv[3], 10) : 80;
if (threshold < 0 || threshold > 100) {
    process.stderr.write("Invalid threshold: "+threshold+"\n");
    process.exit(1);
}

function tokenize(line) {
    return line.toLowerCase().replace(/[^\w\d]/g, " ").replace(/\s+/, " ").split(" ");
}

function evaluate(a, b) {
    var n = 0, r = 0;
    if (b.length > a.length) {
        var t = a;
        a = b;
        b = t;
    }
    for (var i=0; i<a.length;i++) {
        n++;
        if (b.indexOf(a[i]) >= 0) r++;
    }
    return r*100/n;
}

var data = parse(filename);
var comp = [], i;
for (i=0; i<data.length; i++) {
    comp.push(tokenize(data[i]));
}
var dup = [];
for (i=0; i<data.length; i++) {
    if (data[i] === null) continue;
    for (var j=0; j<comp.length; j++) {
        if (i != j && data[i] !== null && data[j] !== null) {
            var val = evaluate(comp[i], comp[j]);
            if (val >= threshold) {
                process.stderr.write("\n");
                process.stderr.write(i+": "+data[i]+"\n");
                process.stderr.write(j+": "+data[j]+"\n");
                process.stderr.write("Similarity: "+val+"%\n");
                if (val == "100") {
                    // Automatically remove exact duplicates
                    data[j] = null; comp[j] = null;
                } else {
                    do {
                        var answer = readline("Which one do you want to keep? 1, 2 or both?");
                        if (answer == "1") {
                            data[j] = null; comp[j] = null;
                            break;
                        } else if (answer == "2") {
                            data[i] = null; comp[i] = null;
                            break;
                        } else if (answer == "both") {
                            // Keep
                            break;
                        }
                        // Keep nagging
                    } while (true);
                }
                process.stderr.write("\n");
                break;
            }
        }
    }
}

process.stdin.pause();

for (i=0; i<data.length; i++) {
    if (data[i] !== null) {
        process.stdout.write(data[i]+"\n");
    }
}
